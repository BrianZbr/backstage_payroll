"""empty message

Revision ID: 1ec554e45c45
Revises: a78323f03826
Create Date: 2021-10-28 14:23:29.002034

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1ec554e45c45'
down_revision = 'a78323f03826'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('workrole',
    sa.Column('workrole_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('contract_id', sa.Integer(), nullable=False),
    sa.Column('workrole_description', sa.Text(), nullable=True),
    sa.Column('hour_budget', sa.Numeric(), nullable=True),
    sa.Column('hourly_pay', sa.Numeric(), nullable=True),
    sa.Column('hourly_deduction', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['contract_id'], ['contract.contract_id'], ),
    sa.PrimaryKeyConstraint('workrole_id'),
    sa.UniqueConstraint('contract_id')
    )
    op.create_table('employee_workrole',
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('workrole_id', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.employee_id'], ),
    sa.ForeignKeyConstraint(['workrole_id'], ['workrole.workrole_id'], ),
    sa.PrimaryKeyConstraint('employee_id', 'workrole_id')
    )
    op.drop_table('employee_work_role')
    op.drop_table('work_role')
    op.add_column('time_worked', sa.Column('workrole_id', sa.Integer(), nullable=False))
    op.drop_constraint('time_worked_work_role_id_fkey', 'time_worked', type_='foreignkey')
    op.create_foreign_key(None, 'time_worked', 'workrole', ['workrole_id'], ['workrole_id'])
    op.drop_column('time_worked', 'work_role_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('time_worked', sa.Column('work_role_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'time_worked', type_='foreignkey')
    op.create_foreign_key('time_worked_work_role_id_fkey', 'time_worked', 'work_role', ['work_role_id'], ['work_role_id'])
    op.drop_column('time_worked', 'workrole_id')
    op.create_table('work_role',
    sa.Column('work_role_id', sa.INTEGER(), server_default=sa.text("nextval('work_role_work_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hour_budget', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('hourly_pay', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('hourly_deduction', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('workrole_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contract_id'], ['contract.contract_id'], name='work_role_contract_id_fkey'),
    sa.PrimaryKeyConstraint('work_role_id', name='work_role_pkey'),
    sa.UniqueConstraint('contract_id', name='work_role_contract_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('employee_work_role',
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('work_role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.employee_id'], name='employee_work_role_employee_id_fkey'),
    sa.ForeignKeyConstraint(['work_role_id'], ['work_role.work_role_id'], name='employee_work_role_work_role_id_fkey'),
    sa.PrimaryKeyConstraint('employee_id', 'work_role_id', name='employee_work_role_pkey')
    )
    op.drop_table('employee_workrole')
    op.drop_table('workrole')
    # ### end Alembic commands ###
